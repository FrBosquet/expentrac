generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  id                 String              @id @default(cuid())
  name               String?
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  loans              Loan[]
  loanShares         LoanShare[]
  subscriptions      Subscription[]
  subscriptionShares SubscriptionShare[]
  providers          UserProvider[]
  notifications      Notification[]
  contracts          Contract[]
  sharesSent         Share[]             @relation("SharesSent")
  sharesReceived     Share[]             @relation("SharesReceived")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Contract {
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  id        String                @id @default(cuid())
  userId    String
  user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  type      String
  fee       Float?
  periods   Period[]
  shares    Share[]
  providers ProvidersOnContract[]
  resources Resource[]
}

model Resource {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  id         String   @id @default(cuid())
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  type       String
  name       String
  url        String
}

model Period {
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  id          String    @id @default(cuid())
  from        DateTime
  to          DateTime?
  fee         Float
  payday      Int?
  paymonth    Int?
  periodicity String?
  contractId  String
  contract    Contract  @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

model Share {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  id         String   @id @default(cuid())
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  fromId     String
  from       User     @relation(name: "SharesSent", fields: [fromId], references: [id], onDelete: Cascade)
  toId       String
  to         User     @relation(name: "SharesReceived", fields: [toId], references: [id], onDelete: Cascade)
}

model ProvidersOnContract {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  id         String   @id @default(cuid())
  as         String
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  providerId String
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

model Provider {
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  id                  String                @id @default(cuid())
  name                String                @unique
  users               UserProvider[]
  isFetched           Boolean               @default(false)
  url                 String?
  logo                String?
  mainColor           String?
  secondaryColor      String?
  rawContent          Json?
  ProvidersOnContract ProvidersOnContract[]
}

model UserProvider {
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  id                      String         @id @default(cuid())
  userId                  String
  user                    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  providerId              String
  provider                Provider       @relation(fields: [providerId], references: [id], onDelete: Cascade)
  loansAsVendor           Loan[]         @relation(name: "LoanVendorRelation")
  loansAsPlatform         Loan[]         @relation(name: "LoanPlatformRelation")
  loansAsLender           Loan[]         @relation(name: "LoanLenderRelation")
  subscriptionsAsVendor   Subscription[] @relation(name: "SubscriptionVendorRelation")
  subscriptionsAsPlatform Subscription[] @relation(name: "SubscriptionPlatformRelation")
}

model Notification {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date      DateTime
  type      String
  payload   Json?
  ack       Boolean  @default(false)
}

// TO REMOVE
model Loan {
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  id         String        @id @default(cuid())
  name       String
  fee        Float
  initial    Float         @default(0)
  startDate  DateTime
  endDate    DateTime
  userId     String
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  vendorId   String?
  vendor     UserProvider? @relation(name: "LoanVendorRelation", fields: [vendorId], references: [id], onDelete: Cascade)
  platformId String?
  platform   UserProvider? @relation(name: "LoanPlatformRelation", fields: [platformId], references: [id], onDelete: Cascade)
  lenderId   String?
  lender     UserProvider? @relation(name: "LoanLenderRelation", fields: [lenderId], references: [id], onDelete: Cascade)
  shares     LoanShare[]
  link       String?
}

model LoanShare {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @default(cuid())
  loanId    String
  loan      Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accepted  Boolean?
}

model Subscription {
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  id         String              @id @default(cuid())
  name       String
  fee        Float
  userId     String
  yearly     Boolean             @default(false)
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  vendorId   String?
  vendor     UserProvider?       @relation(name: "SubscriptionVendorRelation", fields: [vendorId], references: [id], onDelete: Cascade)
  platformId String?
  platform   UserProvider?       @relation(name: "SubscriptionPlatformRelation", fields: [platformId], references: [id], onDelete: Cascade)
  shares     SubscriptionShare[]
  payday     Int?
  link       String?
}

model SubscriptionShare {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  id             String       @id @default(cuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  accepted       Boolean?
}
